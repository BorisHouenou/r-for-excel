[
["synthesis.html", "Chapter 10 Synthesis 10.1 Summary 10.2 Objectives 10.3 Resources 10.4 Lesson 10.5 Attach packages, read in and explore the data 10.6 Some data cleaning to get salmon landings 10.7 Find grouped summary data 10.8 Make a graph of US commercial fisheries value by species over time with ggplot2 10.9 Export your salmon value graph with ggsave 10.10 2015 commercial fisheries value by state 10.11 Making a nice HTML table 10.12 Sync with GitHub remote", " Chapter 10 Synthesis 10.1 Summary In this session, we’ll pull together the skills that we’ve learned so far. We’ll create a new GitHub repo and R project, wrangle and visualize data from spreadsheets in R Markdown, communicate between RStudio (locally) and GitHub (remotely) to keep our updates safe, then TODO: share our outputs in a nicely formatted GitHub page. And we’ll learn a few new things along the way! Grolemund &amp; Wickham R4DS Illustration 10.2 Objectives Create a new repo on GitHub Clone the repo to create a new version-controlled R project Add data to **data** folder in working directory Create a new R Markdown document Attach necessary packages (tidyverse, here, janitor, kableExtra) Use here::here() for simpler (and safer) file paths Data tidying and wrangling (dplyr, tidyr, etc.) HTML tables with kable() and kableExtra Data visualization (ggplot2) TODO: Publish with a useful ReadMe to share? 10.3 Resources Project oriented workflows by Jenny Bryan 10.4 Lesson 10.4.1 Set-up: In GitHub, create a new repository called us-fisheries-landings Clone the repo to create a version controlled project (remember, copy &amp; paste the URL from the GitHub Clone / Download) In the local project working directory, create a subfolder called ‘data’ Copy and paste the noaa_fisheries.csv file into the ‘data’ folder Create a new R Markdown document within your us-fisheries-landings project Knit your .Rmd to html, saving as us_landings.Rmd Data: File name: noaa_fisheries.csv Description: NOAA Commercial Fisheries Landing data (1950 - 2017) Accessed from: https://www.st.nmfs.noaa.gov/commercial-fisheries/commercial-landings/ Source: Fisheries Statistics Division of the NOAA Fisheries Note on the data: “aggregate” here means “These names represent aggregations of more than one species. They are not inclusive, but rather represent landings where we do not have species-specific data. Selecting”Sharks“, for example, will not return all sharks but only those where we do not have more specific information.” 10.5 Attach packages, read in and explore the data Attach (load) packages with library(): library(tidyverse) library(here) library(janitor) library(kableExtra) Read in the noaa_fisheries.csv data as object us_landings: us_landings &lt;- read_csv(here(&quot;data&quot;,&quot;noaa_fisheries.csv&quot;)) ## Parsed with column specification: ## cols( ## Year = col_double(), ## State = col_character(), ## `AFS Name` = col_character(), ## `Landings (pounds)` = col_double(), ## `Dollars (USD)` = col_character() ## ) Go exploring a bit: summary(us_landings) View(us_landings) names(us_landings) head(us_landings) tail(us_landings) 10.6 Some data cleaning to get salmon landings Clean up column names (clean_names()) Convert everything to lower case with mutate() + (str_to_lower()) Remove dollar signs in value column (mutate() + parse_number()) Remove the “aggregate” grouping indicator in species (mutate() + a new function! str_remove()) %&gt;% Keep only observations that include “salmon” (filter()) Separate the grouped name (“salmon”) from any additional refined information on species (separate()) We’ll break this up into two pieces: A tidier version of the entire data frame A subset that only contains salmon information First: tidying the entire data frame landings_tidy &lt;- us_landings %&gt;% clean_names() %&gt;% # Make column headers snake_case mutate( state = str_to_lower(state), afs_name = tolower(afs_name) ) %&gt;% # Converts character columns to lowercase mutate(dollars_num = parse_number(dollars_usd)) Now, getting just the salmon: salmon_landings &lt;- landings_tidy %&gt;% mutate(afs_clean = str_remove(afs_name, pattern = &quot;aggregate&quot;)) %&gt;% filter(str_detect(afs_clean, pattern = &quot;salmon&quot;)) %&gt;% # Detect matches for crab separate(afs_clean, into = c(&quot;group&quot;,&quot;species&quot;), sep = &quot;,&quot;) Explore salmon_landings. 10.7 Find grouped summary data Find the annual total US landings and dollar value (summing across all states) for each type of salmon using group_by() + summarize(): salmon_summary &lt;- salmon_landings %&gt;% group_by(year, species) %&gt;% summarize( tot_landings = sum(landings_pounds), tot_value = sum(dollars_num) ) 10.8 Make a graph of US commercial fisheries value by species over time with ggplot2 salmon_landings_graph &lt;- ggplot(salmon_summary, aes(x = year, y = tot_landings, group = species)) + geom_line(aes(color = species)) + theme_bw() + labs(x = &quot;year&quot;, y = &quot;US commercial salmon landings (pounds)&quot;) salmon_landings_graph 10.9 Export your salmon value graph with ggsave ggsave(plot = salmon_landings_graph, here(&quot;figures&quot;, &quot;us_salmon_landings.png&quot;), height = 5, width = 8) 10.10 2015 commercial fisheries value by state Now, let’s create a finalized table of the top 5 states (by total commercial fisheries value) for 2015 . Remember that we already created a tidied data frame, landings_tidy. Critical thinking for data wrangling workflow: Why does it make sense (especially now) that we broke our previous wrangling into two steps before getting our salmon subset? state_value &lt;- landings_tidy %&gt;% filter(year %in% c(2015)) %&gt;% group_by(state) %&gt;% summarize( state_value = sum(dollars_num, na.rm = TRUE), state_landings = sum(landings_pounds, na.rm = TRUE) ) %&gt;% arrange(-state_value) %&gt;% head(5) Look at our summary data frame, state_value - which contains all the information we want, but doesn’t look very finalized. What are some ways we’d want to finalize it for a report? Change units (to millions of dollars and pounds) Update column names Capitalize the state names Let’s do it! 10.11 Making a nice HTML table First, we’ll create it as a finalized data frame: state_table &lt;- state_value %&gt;% mutate(`Fisheries value ($ millions)` = round(state_value / 1e6, 2), `Landings (million pounds)` = round(state_landings / 1e6, 1)) %&gt;% select(-state_value, -state_landings) %&gt;% rename(State = state) %&gt;% mutate(State = str_to_title(State)) Now, use kable() + kableExtra to nicely format it for HTML: kable(state_table) %&gt;% kable_styling(bootstrap_options = &quot;striped&quot;, full_width = FALSE) %&gt;% add_header_above(c(&quot;&quot;, &quot;2015 US commercial fisheries - top 5 states by value&quot; = 2)) 2015 US commercial fisheries - top 5 states by value State Fisheries value ($ millions) Landings (million pounds) Alaska 1750.20 6015.1 Maine 628.95 252.5 Massachusetts 523.67 259.8 Louisiana 369.62 1068.5 Washington 221.54 148.8 10.12 Sync with GitHub remote Stage, commit, (pull), and push your updates to GitHub for safe storage &amp; sharing. Check to make sure that the changes have been stored. 10.12.1 End synthesis session! "]
]
